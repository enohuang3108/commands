# Kiro 開發流程指南

本文件提供 Kiro 開發流程的詳細使用說明，涵蓋從新專案建立到功能開發與進度管理的所有環節。

-----

## 1\. 流程總覽

Kiro 透過一系列的指令和文件來標準化開發流程，確保專案從概念到實作的順暢進行。主要分為以下階段：

  * **階段 0: 專案引導 (Project Steering)**：可選但推薦，用於生成專案的指引文件。
  * **階段 1: 規格建立 (Specification Creation)**：核心階段，依序產出需求、設計與任務。
  * **階段 2: 進度管理 (Progress Management)**：追蹤與查詢功能的開發進度。

-----

## 2\. 新專案啟動

當您開始一個全新的專案時，請按照以下步驟進行：

1.  **專案引導文件生成 (推薦但不強制)**

    ```bash
    /steering-init
    ```

    *此步驟會生成初始引導文件（如 product.md, tech.md, structure.md），為您的專案提供基礎規範。*

2.  **開始建立新功能的規格**

    ```bash
    /spec-init "希望開發一個功能，讓使用者可以上傳 PDF，提取其中的圖表，並由 AI 解釋內容。技術堆疊使用 Next.js、TypeScript、Tailwind CSS。"
    ```

    *使用 `/spec-init` 並提供詳細的專案說明，Kiro 將基於此說明初始化規格結構，並自動生成 `feature-name` (例如此處的 `pdf-diagram-extractor`)。*

3.  **產生需求定義**

    ```bash
    /spec-requirements pdf-diagram-extractor
    ```

    *執行此指令後，請檢閱並編輯位於 `.kiro/specs/pdf-diagram-extractor/requirements.md` 的需求文件，確保其符合您的期望。*

4.  **需求核准 (手動)**
    *在您確認需求無誤後，請手動編輯 `spec.json` 文件，將對應功能的 `"requirements"` 欄位設定為 `true`。*

5.  **技術設計**

    ```bash
    /spec-design pdf-diagram-extractor
    ```

    *需求核准後，執行此指令以生成技術設計文件。請檢閱並編輯位於 `.kiro/specs/pdf-diagram-extractor/design.md` 的設計文件。*

6.  **設計核准 (手動)**
    *完成設計文件的檢閱後，請手動編輯 `spec.json` 文件，將對應功能的 `"design"` 欄位設定為 `true`。*

7.  **任務生成**

    ```bash
    /spec-tasks pdf-diagram-extractor
    ```

    *設計核准後，執行此指令以生成實作任務列表。請檢閱並編輯位於 `.kiro/specs/pdf-diagram-extractor/tasks.md` 的任務文件。*

8.  **任務核准 (手動)**
    *最後，請手動編輯 `spec.json` 文件，將對應功能的 `"tasks"` 欄位設定為 `true`。*

9.  **開始實作**
    *所有規格文件核准後，即可根據生成的任務列表開始實作。*

-----

## 3\. 為現有專案新增功能

若您希望為已存在的專案添加新功能，其流程與新專案相似，但有幾點區別：

1.  **更新或初始化引導文件 (選項)**

      * **更新引導文件**：如果現有專案有重大變更，建議執行 `/steering-update`。
        ```bash
        /steering-update
        ```
      * **首次建立引導文件**：如果現有專案尚未建立引導文件，則執行 `/steering-init`。
        ```bash
        /steering-init
        ```

2.  **開始建立新功能的規格**

    ```bash
    /spec-init "在此描述新功能的詳細說明"
    ```

    *請詳細描述您要新增的功能。*

3.  **後續步驟與新專案相同**

      * 接下來的步驟，如產生需求、設計、任務以及各階段的核准，均與「新專案啟動」流程中的步驟 3 至 8 完全相同。

-----

## 4\. 進度查詢

在開發過程中，您可以隨時查詢特定功能的進度：

  * **查詢特定功能的進度**
    ```bash
    /spec-status my-feature
    ```
    *此指令將顯示該功能當前的階段、核准狀態以及任務的完成進度。*

-----

## 5\. 斜線指令列表 (Slash Commands)

### 🚀 階段 0: 專案引導 (可選)

| 指令               | 用途             | 使用時機                       |
| :----------------- | :--------------- | :----------------------------- |
| `/steering-init`   | 生成初始引導文件 | 新建/現有專案需要文件化時      |
| `/steering-update` | 更新引導文件     | 重大變更後，定期維護時         |
| `/steering-custom` | 建立客製化引導文件 | 需要特殊規範或指南時           |

  * **注意**：引導文件是推薦但非強制性。小型功能新增或實驗性開發可省略。

**引導文件種類**

  * `product.md`: 產品概述、功能、使用案例
  * `tech.md`: 架構、技術堆疊、開發環境
  * `structure.md`: 目錄結構、程式碼規範、命名規則
  * 客製化文件: API 規範、測試策略、安全政策等

### 📋 階段 1: 規格建立

| 指令                           | 用途                 | 使用時機           |
| :----------------------------- | :------------------- | :----------------- |
| `/spec-init [詳細專案說明]`    | 從專案說明初始化規格結構 | 新功能開發開始時   |
| `/spec-requirements [feature-name]` | 生成需求定義文件     | 規格初始化後立即   |
| `/spec-design [feature-name]`  | 生成技術設計文件     | 需求核准後         |
| `/spec-tasks [feature-name]`   | 生成實作任務         | 設計核准後         |

### 📊 階段 2: 進度管理

| 指令                         | 用途             | 使用時機   |
| :--------------------------- | :--------------- | :--------- |
| `/spec-status [feature-name]` | 查詢當前進度與階段 | 開發中隨時 |

-----

## 6\. 最佳實踐

為確保開發流程的順暢與高效，請遵循以下推薦事項並避免常見錯誤：

### ✅ 推薦事項

  * **始終從引導開始**
      * 新專案務必執行 `/steering-init`。
      * 現有專案也透過 `/steering-update` 更新至最新。
  * **不跳過階段**
      * 嚴格遵守需求 → 設計 → 任務的順序。
      * 每個階段務必進行人工審閱。
  * **定期檢查進度**
      * 透過 `/spec-status` 掌握當前狀況。
      * 適當更新任務完成狀況。
  * **維護引導文件**
      * 重大變更後執行 `/steering-update`。
      * 隨專案成長而更新。

### ❌ 應避免事項

  * **未經核准進入下一階段**
      * 不要忘記手動更新 `spec.json` 中的核准狀態。
  * **置引導文件不顧**
      * 過時的資訊將阻礙開發。
  * **未更新任務狀態**
      * 進度不明確會導致管理困難。

-----
